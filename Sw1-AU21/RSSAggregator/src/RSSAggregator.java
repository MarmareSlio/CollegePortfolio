import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Sam Espanioly
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * // row
     * <th>Date</th> //column
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    // find and print description of title if available
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<html>");
        out.println("<head>");
        out.print("<title>");
        String titleDesc = "";
        int titleIndex = getChildElement(channel, "title");
        if (titleIndex >= 0) { // title index
            // printing the title description
            titleDesc = (channel.child(titleIndex).child(0).label());
            out.print(titleDesc);
        } else {
            out.println("Title does not have any description.");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

        int linkIndex = getChildElement(channel, "link"); // link is required
        int itemIndex = getChildElement(channel, "item"); // item is optional

        String link = channel.child(linkIndex).child(0).label(); //unknown error here
        out.print("<a href=\" " + link + "\">" + titleDesc + "</a>");
        out.println("</h1>"); //header
        out.println("<p>"); // paragraph
        out.println("<table border=\"1\">");
        out.println("<tr> Date"); // column
        out.println("<tr> Source"); // one for source
        out.println("<tr> News"); // and another for news
        int loopForItem = 0;
        int tempForItemIndex = itemIndex;
        while (loopForItem < channel.numberOfChildren() - itemIndex) { //finds all the items and the sources and the pubDates they were released at
            loopForItem += 1;
            out.print("<th>"); // row
            if (itemIndex >= 0) {
                out.print(channel.child(tempForItemIndex)
                        .child(getChildElement(channel.child(tempForItemIndex),
                                "pubDate"))
                        .child(0).label()); // gets the label of the child of date
            } else {
                out.print("No date available");
            }

            out.println("</th>");
            out.print("<th>"); // row
            if (itemIndex >= 0) {
                out.print(
                        "<a href=\""
                                + channel.child(tempForItemIndex)
                                        .child(getChildElement(
                                                channel.child(tempForItemIndex),
                                                "link"))
                                        .child(0).label()
                                + "\" >"
                                + channel.child(tempForItemIndex)
                                        .child(getChildElement(
                                                channel.child(tempForItemIndex),
                                                "title"))
                                        .child(0).label()
                                + "</a>"); // gets the label of the child of title and prints the link for it
            } else {
                out.print("No title available");
            }

            out.println("</th>");

            out.print("<th>");
            if (itemIndex >= 0) {
                out.print(channel.child(tempForItemIndex)
                        .child(getChildElement(channel.child(tempForItemIndex),
                                "source"))
                        .child(0).label()); // same thing but with source
            } else {
                out.print("No source available");
            }
            out.println("</th>");
            tempForItemIndex++;
        }

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</tr></tr></tr></p></body></head></html>"); // closing everything that was open
        //did not need this
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int childNum = -1;
        //check if xml tree has any children
        if (xml.numberOfChildren() >= 0) {
            // if it does then check which one is equal to tag
            for (int i = 0; i < xml.numberOfChildren() && childNum == -1; i++) {
                if (xml.child(i).label().equals(tag)) {
                    childNum = i;
                }
            }
        }
        return childNum; //return the child index of xml tag
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        // gets attributes of item
        out.println("<a href=\"test\">" + item.attributeNames() + "</a>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        out.print(
                "Please enter a link for the XML/RSS file you want to compute: ");
        XMLTree xml = new XMLTree1(in.nextLine());
        //out.println("Top News Stories!");
        //  out.println("<ul>");
        outputHeader(xml.child(0), out);
        //  out.println("<li>");
        outputFooter(out);
        // out.println("</li></ul>"); // these are supposed to be in outputFooter but I put them here temporarily
        in.close();
        out.close();

    }

}