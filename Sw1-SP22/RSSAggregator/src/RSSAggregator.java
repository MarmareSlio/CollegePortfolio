import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Sam Espanioly
 *
 */
public final class RSSAggregator {

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        // default for description
        String description = "No description";
        int i = getChildElement(channel, "description");
        description = channel.child(i).child(0).label();
        // setting title to default
        String title = "Empty Title";
        // i variable includes the index of link if found
        i = getChildElement(channel, "link");
        //links are required
        String link = channel.child(i).child(0).label();
        // getting the index of title
        i = getChildElement(channel, "title");
        title = channel.child(i).child(0).label();
        //header format
        out.println("<html> <head> <title>" + title + "</title>\r\n"
                + "</head> <body>\r\n" + "<h1><a href=\"" + link + "\">" + title
                + "</a></h1>\r\n" + "<p>" + description + "</p>\r\n"
                + "<table border=\"1\">\r\n" + "<tr>\r\n" + "<th>Date</th>\r\n"
                + "<th>Source</th>\r\n" + "<th>News</th>\r\n" + "</tr>");
        //finding the first child of channel that is named "item"
        i = getChildElement(channel, "item");
        //finding numberofchildren for channel
        int max = channel.numberOfChildren();
        //^ so we don't exceed it in the while loop
        while (channel.child(i).label().equals("item") && i >= 0
                && i < max - 1) {
            XMLTree item = channel.child(i);
            out.println("<tr>");
            //Processing it to the table format
            processItem(item, out);
            //closing the row
            out.println("</tr>");
            i++;
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        //closing the rest of the html format in the main body
        out.println("</table> \n</body> \n</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        //returning -1 as a default
        int w = -1;
        // i is for the loop
        int i = 0;
        // length checks for number of children for xml
        int length = xml.numberOfChildren();
        //added fast to make the while loop break when it finds the first tag
        boolean fast = true;
        while (i < length && fast) {
            if (i >= 0 && xml.child(i).label().equals(tag)) {
                w = i;
                // when it is found the while loop exits
                fast = false;
            }
            i++;
        }
        // if tag is not found then outputs script
        //if (w == -1) {
        //System.out.println("There is no child with that tag name!");
        //}
        return w;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //default for title/description
        String title = "No title available";
        //default for source
        String source = "No source available";
        //finding the index of link to embed it to the source
        int i = getChildElement(item, "link");
        // this works if i is not a negative number
        String link1 = ""; //link1 is for embedding the title
        //making sure there is a label
        if (i >= 0 && item.child(i).numberOfChildren() > 0) {
            //if there's a link tag then there must be a leaf tag so
            link1 = item.child(i).child(0).label();
        }
        //i to find the child element in the RSS tree labeled "pubDate"
        i = getChildElement(item, "pubDate");
        // this works if i is not a negative number
        //check if the label is there otherwise skip it
        if (i >= 0 && item.child(i).numberOfChildren() > 0) {
            out.println("<td>" + item.child(i).child(0).label() + "</td>");
        } else {
            //if there's no date then
            out.println("<td>No date available</td>");
        }
        i = getChildElement(item, "source");
        // this works only if i is not a negative number
        if (i >= 0 && item.child(i).numberOfChildren() > 0) {
            source = item.child(i).child(0).label();
            //link is required to be there if the source is found
            //therefore no need to check for attribute
            String link = item.child(i).attributeValue("url");
            source = "<a href=\"" + link + "\">" + source + "</a>";
        }
        out.println("<td>" + source + "</td>");

        i = getChildElement(item, "title");
        int u = getChildElement(item, "description");
        // this works if i is not a negative number
        //check that label is there
        if (i >= 0 && item.child(i).numberOfChildren() > 0) {
            title = item.child(i).child(0).label();
        } else {
            // no need to check for anything because if title is not found then
            //description must be there
            //only check if there is a label
            if (item.child(u).numberOfChildren() > 0) {
                title = item.child(u).child(0).label();
            }
        }
        //title output
        title = "<td><a href=\"" + link1 + "\">" + title + "</a></td>";
        out.println(title);
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        //checking if its an rss and  version 2.0
        boolean rss2 = xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0");
        //validating the rss link inside the xml source from the feed
        if (rss2) {

            // finding the length of the feed
            int len = xml.child(0).numberOfChildren();
            int i = 0;
            while (i < len - 1) {
                //outputting them in a folder
                SimpleWriter fileOut = new SimpleWriter1L("data//" + file);
                //xml.child(0) refers to channel
                //outputting the files in data folder
                outputHeader(xml.child(0), fileOut);
                outputFooter(fileOut);
                i++;
            }
        } else {
            out.println("This input is not a valid XML feed link. Goodbye!");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * out.print(e+w) Input the source URL.
         */
        out.print(
                "Enter the URL of an XML feed that includes RSS 2.0 news feed: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        // making sure the input is valid
        boolean feedCheck = xml.label().equals("feeds");
        if (feedCheck) {
            // finding the length of the xml tree
            int len = xml.numberOfChildren();
            int i = 0;
            out.println("Great! Your link is valid!");
            out.println("Enter a name for the output file: ");
            String nam = in.nextLine();
            //name of the file is nam
            SimpleWriter fileOut = new SimpleWriter1L(nam);
            fileOut.println("<html>");
            fileOut.println("<head>");
            //default for title because its required
            String title = xml.attributeValue("title");
            fileOut.println("<title>" + title + "</title>");
            fileOut.println("</head>");
            fileOut.println("<body>");
            fileOut.println("<h2>" + title + "</h2>");
            fileOut.println("<ul>");
            //finding where the first feed is
            i = getChildElement(xml, "feed");
            while (i < len) {
                //getting the url file name and the title
                // this program would not work if url is not available
                String url1 = xml.child(i).attributeValue("url");
                // but it would work without a name or a file name/ title
                String file = "noFileName";
                if (xml.child(i).hasAttribute("file")) {
                    file = xml.child(i).attributeValue("file");
                }
                String name = "No Title";
                if (xml.child(i).hasAttribute("file")) {
                    name = xml.child(i).attributeValue("name");
                }
                processFeed(url1, file, out);
                fileOut.println("<li><a href=\"" + "data/" + file + "\"" + "\">"
                        + name + "</a></li>");
                i++;
            }
            //closing the processFeed stuff
            fileOut.println("</ul>");
            fileOut.println("</body>");
            fileOut.println("</html>");
            fileOut.close();
        } else {
            //in case url is not valid
            out.println("This input is not a valid XML feed link. Goodbye!");
        }
        out.println("GOOD-Bye!");
        in.close();
        out.close();
    }

}